module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateEntry {
  count: Int!
}

type AggregateGif {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Entry {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  gif: Gif!
}

type EntryConnection {
  pageInfo: PageInfo!
  edges: [EntryEdge]!
  aggregate: AggregateEntry!
}

input EntryCreateInput {
  id: ID
  user: UserCreateOneWithoutEntriesInput!
  gif: GifCreateOneWithoutEntryInput!
}

input EntryCreateManyWithoutUserInput {
  create: [EntryCreateWithoutUserInput!]
  connect: [EntryWhereUniqueInput!]
}

input EntryCreateOneWithoutGifInput {
  create: EntryCreateWithoutGifInput
  connect: EntryWhereUniqueInput
}

input EntryCreateWithoutGifInput {
  id: ID
  user: UserCreateOneWithoutEntriesInput!
}

input EntryCreateWithoutUserInput {
  id: ID
  gif: GifCreateOneWithoutEntryInput!
}

type EntryEdge {
  node: Entry!
  cursor: String!
}

enum EntryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EntryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EntryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [EntryScalarWhereInput!]
  OR: [EntryScalarWhereInput!]
  NOT: [EntryScalarWhereInput!]
}

type EntrySubscriptionPayload {
  mutation: MutationType!
  node: Entry
  updatedFields: [String!]
  previousValues: EntryPreviousValues
}

input EntrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EntryWhereInput
  AND: [EntrySubscriptionWhereInput!]
  OR: [EntrySubscriptionWhereInput!]
  NOT: [EntrySubscriptionWhereInput!]
}

input EntryUpdateInput {
  user: UserUpdateOneRequiredWithoutEntriesInput
  gif: GifUpdateOneRequiredWithoutEntryInput
}

input EntryUpdateManyWithoutUserInput {
  create: [EntryCreateWithoutUserInput!]
  delete: [EntryWhereUniqueInput!]
  connect: [EntryWhereUniqueInput!]
  set: [EntryWhereUniqueInput!]
  disconnect: [EntryWhereUniqueInput!]
  update: [EntryUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EntryUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [EntryScalarWhereInput!]
}

input EntryUpdateOneRequiredWithoutGifInput {
  create: EntryCreateWithoutGifInput
  update: EntryUpdateWithoutGifDataInput
  upsert: EntryUpsertWithoutGifInput
  connect: EntryWhereUniqueInput
}

input EntryUpdateWithoutGifDataInput {
  user: UserUpdateOneRequiredWithoutEntriesInput
}

input EntryUpdateWithoutUserDataInput {
  gif: GifUpdateOneRequiredWithoutEntryInput
}

input EntryUpdateWithWhereUniqueWithoutUserInput {
  where: EntryWhereUniqueInput!
  data: EntryUpdateWithoutUserDataInput!
}

input EntryUpsertWithoutGifInput {
  update: EntryUpdateWithoutGifDataInput!
  create: EntryCreateWithoutGifInput!
}

input EntryUpsertWithWhereUniqueWithoutUserInput {
  where: EntryWhereUniqueInput!
  update: EntryUpdateWithoutUserDataInput!
  create: EntryCreateWithoutUserInput!
}

input EntryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  gif: GifWhereInput
  AND: [EntryWhereInput!]
  OR: [EntryWhereInput!]
  NOT: [EntryWhereInput!]
}

input EntryWhereUniqueInput {
  id: ID
}

type Gif {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
  width: String
  height: String
  giphyId: String
  entry: Entry!
}

type GifConnection {
  pageInfo: PageInfo!
  edges: [GifEdge]!
  aggregate: AggregateGif!
}

input GifCreateInput {
  id: ID
  url: String!
  width: String
  height: String
  giphyId: String
  entry: EntryCreateOneWithoutGifInput!
}

input GifCreateOneWithoutEntryInput {
  create: GifCreateWithoutEntryInput
  connect: GifWhereUniqueInput
}

input GifCreateWithoutEntryInput {
  id: ID
  url: String!
  width: String
  height: String
  giphyId: String
}

type GifEdge {
  node: Gif!
  cursor: String!
}

enum GifOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
  giphyId_ASC
  giphyId_DESC
}

type GifPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
  width: String
  height: String
  giphyId: String
}

type GifSubscriptionPayload {
  mutation: MutationType!
  node: Gif
  updatedFields: [String!]
  previousValues: GifPreviousValues
}

input GifSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GifWhereInput
  AND: [GifSubscriptionWhereInput!]
  OR: [GifSubscriptionWhereInput!]
  NOT: [GifSubscriptionWhereInput!]
}

input GifUpdateInput {
  url: String
  width: String
  height: String
  giphyId: String
  entry: EntryUpdateOneRequiredWithoutGifInput
}

input GifUpdateManyMutationInput {
  url: String
  width: String
  height: String
  giphyId: String
}

input GifUpdateOneRequiredWithoutEntryInput {
  create: GifCreateWithoutEntryInput
  update: GifUpdateWithoutEntryDataInput
  upsert: GifUpsertWithoutEntryInput
  connect: GifWhereUniqueInput
}

input GifUpdateWithoutEntryDataInput {
  url: String
  width: String
  height: String
  giphyId: String
}

input GifUpsertWithoutEntryInput {
  update: GifUpdateWithoutEntryDataInput!
  create: GifCreateWithoutEntryInput!
}

input GifWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  width: String
  width_not: String
  width_in: [String!]
  width_not_in: [String!]
  width_lt: String
  width_lte: String
  width_gt: String
  width_gte: String
  width_contains: String
  width_not_contains: String
  width_starts_with: String
  width_not_starts_with: String
  width_ends_with: String
  width_not_ends_with: String
  height: String
  height_not: String
  height_in: [String!]
  height_not_in: [String!]
  height_lt: String
  height_lte: String
  height_gt: String
  height_gte: String
  height_contains: String
  height_not_contains: String
  height_starts_with: String
  height_not_starts_with: String
  height_ends_with: String
  height_not_ends_with: String
  giphyId: String
  giphyId_not: String
  giphyId_in: [String!]
  giphyId_not_in: [String!]
  giphyId_lt: String
  giphyId_lte: String
  giphyId_gt: String
  giphyId_gte: String
  giphyId_contains: String
  giphyId_not_contains: String
  giphyId_starts_with: String
  giphyId_not_starts_with: String
  giphyId_ends_with: String
  giphyId_not_ends_with: String
  entry: EntryWhereInput
  AND: [GifWhereInput!]
  OR: [GifWhereInput!]
  NOT: [GifWhereInput!]
}

input GifWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEntry(data: EntryCreateInput!): Entry!
  updateEntry(data: EntryUpdateInput!, where: EntryWhereUniqueInput!): Entry
  upsertEntry(where: EntryWhereUniqueInput!, create: EntryCreateInput!, update: EntryUpdateInput!): Entry!
  deleteEntry(where: EntryWhereUniqueInput!): Entry
  deleteManyEntries(where: EntryWhereInput): BatchPayload!
  createGif(data: GifCreateInput!): Gif!
  updateGif(data: GifUpdateInput!, where: GifWhereUniqueInput!): Gif
  updateManyGifs(data: GifUpdateManyMutationInput!, where: GifWhereInput): BatchPayload!
  upsertGif(where: GifWhereUniqueInput!, create: GifCreateInput!, update: GifUpdateInput!): Gif!
  deleteGif(where: GifWhereUniqueInput!): Gif
  deleteManyGifs(where: GifWhereInput): BatchPayload!
  createRoom(data: RoomCreateInput!): Room!
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  updateManyRooms(data: RoomUpdateManyMutationInput!, where: RoomWhereInput): BatchPayload!
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteManyRooms(where: RoomWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  entry(where: EntryWhereUniqueInput!): Entry
  entries(where: EntryWhereInput, orderBy: EntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entry]!
  entriesConnection(where: EntryWhereInput, orderBy: EntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntryConnection!
  gif(where: GifWhereUniqueInput!): Gif
  gifs(where: GifWhereInput, orderBy: GifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gif]!
  gifsConnection(where: GifWhereInput, orderBy: GifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GifConnection!
  room(where: RoomWhereUniqueInput!): Room
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Room {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type RoomConnection {
  pageInfo: PageInfo!
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  id: ID
  name: String!
  users: UserCreateManyWithoutRoomsInput
}

input RoomCreateManyWithoutUsersInput {
  create: [RoomCreateWithoutUsersInput!]
  connect: [RoomWhereUniqueInput!]
}

input RoomCreateWithoutUsersInput {
  id: ID
  name: String!
}

type RoomEdge {
  node: Room!
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type RoomPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input RoomScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [RoomScalarWhereInput!]
  OR: [RoomScalarWhereInput!]
  NOT: [RoomScalarWhereInput!]
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
  AND: [RoomSubscriptionWhereInput!]
  OR: [RoomSubscriptionWhereInput!]
  NOT: [RoomSubscriptionWhereInput!]
}

input RoomUpdateInput {
  name: String
  users: UserUpdateManyWithoutRoomsInput
}

input RoomUpdateManyDataInput {
  name: String
}

input RoomUpdateManyMutationInput {
  name: String
}

input RoomUpdateManyWithoutUsersInput {
  create: [RoomCreateWithoutUsersInput!]
  delete: [RoomWhereUniqueInput!]
  connect: [RoomWhereUniqueInput!]
  set: [RoomWhereUniqueInput!]
  disconnect: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [RoomUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [RoomScalarWhereInput!]
  updateMany: [RoomUpdateManyWithWhereNestedInput!]
}

input RoomUpdateManyWithWhereNestedInput {
  where: RoomScalarWhereInput!
  data: RoomUpdateManyDataInput!
}

input RoomUpdateWithoutUsersDataInput {
  name: String
}

input RoomUpdateWithWhereUniqueWithoutUsersInput {
  where: RoomWhereUniqueInput!
  data: RoomUpdateWithoutUsersDataInput!
}

input RoomUpsertWithWhereUniqueWithoutUsersInput {
  where: RoomWhereUniqueInput!
  update: RoomUpdateWithoutUsersDataInput!
  create: RoomCreateWithoutUsersInput!
}

input RoomWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
}

input RoomWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  entry(where: EntrySubscriptionWhereInput): EntrySubscriptionPayload
  gif(where: GifSubscriptionWhereInput): GifSubscriptionPayload
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  expoPushToken: String
  entries(where: EntryWhereInput, orderBy: EntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entry!]
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  expoPushToken: String
  entries: EntryCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutUsersInput
}

input UserCreateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutEntriesInput {
  create: UserCreateWithoutEntriesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEntriesInput {
  id: ID
  name: String!
  expoPushToken: String
  rooms: RoomCreateManyWithoutUsersInput
}

input UserCreateWithoutRoomsInput {
  id: ID
  name: String!
  expoPushToken: String
  entries: EntryCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  expoPushToken_ASC
  expoPushToken_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  expoPushToken: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  expoPushToken: String
  expoPushToken_not: String
  expoPushToken_in: [String!]
  expoPushToken_not_in: [String!]
  expoPushToken_lt: String
  expoPushToken_lte: String
  expoPushToken_gt: String
  expoPushToken_gte: String
  expoPushToken_contains: String
  expoPushToken_not_contains: String
  expoPushToken_starts_with: String
  expoPushToken_not_starts_with: String
  expoPushToken_ends_with: String
  expoPushToken_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  expoPushToken: String
  entries: EntryUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  name: String
  expoPushToken: String
}

input UserUpdateManyMutationInput {
  name: String
  expoPushToken: String
}

input UserUpdateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoomsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoomsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutEntriesInput {
  create: UserCreateWithoutEntriesInput
  update: UserUpdateWithoutEntriesDataInput
  upsert: UserUpsertWithoutEntriesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutEntriesDataInput {
  name: String
  expoPushToken: String
  rooms: RoomUpdateManyWithoutUsersInput
}

input UserUpdateWithoutRoomsDataInput {
  name: String
  expoPushToken: String
  entries: EntryUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoomsDataInput!
}

input UserUpsertWithoutEntriesInput {
  update: UserUpdateWithoutEntriesDataInput!
  create: UserCreateWithoutEntriesInput!
}

input UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRoomsDataInput!
  create: UserCreateWithoutRoomsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  expoPushToken: String
  expoPushToken_not: String
  expoPushToken_in: [String!]
  expoPushToken_not_in: [String!]
  expoPushToken_lt: String
  expoPushToken_lte: String
  expoPushToken_gt: String
  expoPushToken_gte: String
  expoPushToken_contains: String
  expoPushToken_not_contains: String
  expoPushToken_starts_with: String
  expoPushToken_not_starts_with: String
  expoPushToken_ends_with: String
  expoPushToken_not_ends_with: String
  entries_every: EntryWhereInput
  entries_some: EntryWhereInput
  entries_none: EntryWhereInput
  rooms_every: RoomWhereInput
  rooms_some: RoomWhereInput
  rooms_none: RoomWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  name: String
  expoPushToken: String
}
`
      }
    